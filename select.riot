<riot-form-select>
	<select name="{ name }" onChange={ onChange } class="{ error ? 'error':'' } { select !== fixed ? 'change':'' }">
		<option></option>
		<option each={ values } value="{ value }" selected={ value === select }>{ label }</option>
	</select>
	<style>
	</style>
	<script>
	//	...
	if( !this.opts && !this.opts.form && !this.opts.name ){
		console.log('empty form name and select name.');
	}

	//	...
	if( typeof this.opts.value === 'undefined' ){
		this.opts.value = null;
	}

	//	...
	this.form   = this.opts.form;
	this.name   = this.opts.name;
	this.select = this.opts.value  ? this.opts.value : null;
	this.values = this.opts.values ? this.opts.values: null;
	this.fixed  = this.select !== null ? select: null;
	this.error  = null;

	//	...
	onChange(e){
		var key = $(e.target).prop('name');
		var val = $(e.target).val();

		//	...
		this.select = val;

		//	...
		obs.trigger('form', this.opts.form, this.opts.name, val, 'change');
	};

	//	...
	obs(){
		var self = this;
		obs.on('form', function(form, name, value, modifier){
			//	...
			if( form !== self.opts.form ){
				return;
			}

			//	...
			if( name !== self.opts.name ){
				return;
			}

			//	...
			switch( modifier ){
				case 'set':
					if( value === null ){
						//	...
					}else
					if( typeof value === 'object' ){
						self.values = value;
					}else{
						self.select = value;
						if( self.fixed === null ){
							self.fixed = value;
						}
					}
					break;

				case 'error':
					self.error = value ? true: false;
					break;

				case 'submit':
					if( value === true ){
						self.fixed = self.select;
					}
					break;

				default:
					d(form, name, value, modifier);
				return;
			}
			self.update();
		});
	};

	//	...
	this.on('mount', function(){
		var value = __url.query.get(this.opts.name);
		if( value ){
			this.select = value;
		}
	});

	//	...
	setTimeout(this.obs, 0);
	</script>
</riot-form-select>