<riot-form-text>
	<input type="{ this.type }" name="{ this.name }" value="{ this.value }" class="{ error ? 'error':'' } { ( error !== true && this.fixed !== this.value) ? 'change':'' }" onChange={ onChange } />
	<style scoped>
	:scope input[type="text"] {
	}
	</style>
	<script>
	if( !this.opts.form || !this.opts.name ){
		alert("text.riot is form name or input name has not been set.");
	}

	//	...
	this.form  = this.opts.form;
	this.name  = this.opts.name;
	this.type  = this.opts.type  ? this.opts.type  : 'text';
	this.value = this.opts.value ? this.opts.value : null;
	this.fixed = this.opts.value ? this.opts.value : null;
	this.error = null;

	//	...
	onChange(e){
		var key = $(e.target).prop('name');
		var val = $(e.target).val();
		obs.trigger('form', this.form, this.name, val, 'change');

		//	...
		this.value = val;
	};

	//	...
	onSet(value){
		this.value = value;

		//	...
		if( this.fixed === null ){
			this.fixed = this.value;
		}
	};

	//	...
	obs(){
		var self = this;
		obs.on('form', function(form, name, value, modifier){
			//	...
			if( form !== self.opts.form ){
				return;
			}

			//	...
			if( name !== self.opts.name ){
				return;
			}

			//	...
			switch( modifier ){
				case 'set':
					self.onSet(value);
					break;

				case 'error':
					self.error = value ? true: false;
					break;

				case 'submit':
					if( value === true ){
						self.fixed = self.value;
					}
					break;

				default:
					d(form, name, value, modifier);
			}

			//	...
			self.update();
		});
	};

	//	...
	setTimeout(this.obs, 0);
	</script>
</riot-form-text>